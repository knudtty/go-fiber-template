networks:
  project_dev:
    name: project_dev
    attachable: true

services:
  db:
    image: postgres:16.3-alpine
    volumes:
      - ./postgres_data:/home/postgres/pgdata/data
      - ./:/home/postgres/workdir
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    user: postgres
    networks:
      - project_dev
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "${DB_NAME}", "-u", "${DB_USER}"]
      interval: 1s
      timeout: 5s
      retries: 10

  redis:
    image: redis:7.4-alpine
    networks:
      - project_dev
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 1s
      timeout: 5s
      retries: 10

  migrate:
    image: migrate/migrate:latest
    volumes:
      - ./platform/migrations:/migrations
    networks:
      - project_dev
    links:
      - db
    depends_on:
      db:
        condition: service_healthy
    command: -path=/migrations -database=postgres://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}?sslmode=disable up

  templ:
    build:
      context: .
      dockerfile_inline: |
        FROM golang:1.22-alpine
        WORKDIR /project
        RUN go install github.com/bokwoon95/wgo@latest 
        RUN go install github.com/a-h/templ/cmd/templ@${TEMPL_VERSION}
        ENTRYPOINT wgo -file=.go -file=.templ -xfile=_templ.go TEMPL_EXPERIMENT=rawgo templ generate :: go run main.go
    attach: true
    volumes:
      - ./:/project
      - ${HOME}/go/pkg/mod:/go/pkg/mod
    working_dir: /project
    env_file: .env
    ports:
      - "3000:3000"
    networks:
      - project_dev
    links:
      - db
      - redis
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  sassdev:
    build:
      context: .
      dockerfile_inline: |
        FROM michalklempa/dart-sass:1.70.0
        WORKDIR /project
        RUN mkdir -p /project/external \
          && apt-get update && apt-get install -y curl 
    attach: true
    volumes:
      - ./:/project
    working_dir: /project
    command: >
      /bin/bash -c '
        if [[ ! -d /project/external/bulma-${BULMA_VERSION} ]]; then \
          echo "Downloading bulma version ${BULMA_VERSION}"
          mkdir -p external
          curl -L https://github.com/jgthms/bulma/archive/refs/tags/${BULMA_VERSION}.tar.gz -o /project/external/bulma-sass.tar.gz
          cd /project/external 
          tar -xf bulma-sass.tar.gz 
          rm bulma-sass.tar.gz 
        fi
        /opt/dart-sass/sass --watch --no-source-map /project/styles.scss:/project/public/assets/css/styles.css --style compressed
      '
    networks:
      - project_dev
